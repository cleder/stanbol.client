To run this test it needs a running Stanbol server at localhost port 8080.

Imports first::

    >>> import uuid
    >>> from stanbol.client.contenthub import ContentHub
    
Instatiate a contenthub::    
    
    >>> contenthub = ContentHub("http://stanbol.mazzer.info")
    
    >> interact(locals())
    
Lets Stanbol create an ID for the text.
::
    
    >>> content = 'Paris London %s' % uuid.uuid4().hex
    >>> generated_id = contenthub.add(content)
    >>> generated_id.startswith('sha1-')
    True
    
Lets fetch non-existing content::

    >>> contenthub['non-existing']
    Traceback (most recent call last):
    ...
    KeyError: 'non-existing'
    
    >>> print contenthub.get('non-existing')
    None  

    >>> contenthub.get('non-existing', 'default')
    'default'  
  
Fetch back content::
   
    >>> contenthub[generated_id] == content
    True
    
    >>> contenthub.get(generated_id) == content
    True
    
We can get metadata extracted by Stanbol engines::

    >>> contenthub.metadata(generated_id)
    '<rdf:RDF...</rdf:RDF>\n'
    
Or request it in different formats::
    
    >>> contenthub.metadata(generated_id, format='turtle')
    '...<http://fise.iks-project.eu/ontology/selection-context>..."Paris London...' 

Test if check works::

    >>> result = contenthub.metadata(generated_id, format='notvalid')   
    Traceback (most recent call last):
    ...
    ValueError: Format "notvalid" is not possible.    
    
Theres a generated HTML-Page with all information::

    >>> contenthub.page(generated_id).strip()
    '<html>...Paris London...</html>'

Controlling the id works too::
    
    >>> own_id = 'uuid-%s' % uuid.uuid4().hex    
    >>> contenthub[own_id] = u'Foo bar baz'    
    >>> contenthub[own_id]
    'Foo bar baz'

Change the text::

    >>> contenthub[own_id] = u'Paris Berlin Vienna'
    >>> contenthub[own_id]
    'Paris Berlin Vienna'
